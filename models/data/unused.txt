import tkinter
import tkinter.messagebox

import cv2
import customtkinter
from PIL import Image, ImageTk

customtkinter.set_appearance_mode(
    "System"
)  # Modes: "System" (standard), "Dark", "Light"
customtkinter.set_default_color_theme(
    "blue"
)  # Themes: "blue" (standard), "green", "dark-blue"

import customtkinter
import os
from PIL import Image


# class App(customtkinter.CTk):
#     def __init__(self):
#         super().__init__()

#         self.title("image_example.py")
#         self.geometry("700x450")

#         # set grid layout 1x2
#         self.grid_rowconfigure(0, weight=1)
#         self.grid_columnconfigure(1, weight=1)

#         # load images with light and dark mode image
#         cap = cv2.VideoCapture(0)
#         cv2image = cv2.cvtColor(cap.read()[1], cv2.COLOR_BGR2RGB)
#         img = Image.fromarray(cv2image)

#         self.large_test_image = customtkinter.CTkImage(img, size=(50, 50))

#         # create navigation frame
#         self.navigation_frame = customtkinter.CTkFrame(self, corner_radius=0)
#         self.navigation_frame.grid(row=0, column=0, sticky="nsew")
#         self.navigation_frame.grid_rowconfigure(4, weight=1)


#         self.appearance_mode_menu = customtkinter.CTkOptionMenu(self.navigation_frame, values=["Light", "Dark", "System"],
#                                                                 command=self.change_appearance_mode_event)
#         self.appearance_mode_menu.grid(row=6, column=0, padx=20, pady=20, sticky="s")

#         # create home frame
#         self.home_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
#         self.home_frame.grid_columnconfigure(0, weight=1)

#         self.home_frame_large_image_label = customtkinter.CTkLabel(self.home_frame, text="", image=self.large_test_image)
#         self.home_frame_large_image_label.grid(row=0, column=0, padx=20, pady=10)

#         # create second frame
#         self.second_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")

#         # create third frame
#         self.third_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")

#         # select default frame
#         self.select_frame_by_name("home")

#     def select_frame_by_name(self, name):
#         # set button color for selected button
#         # show selected frame
#         if name == "home":
#             self.home_frame.grid(row=0, column=1, sticky="nsew")
#         else:
#             self.home_frame.grid_forget()
#         if name == "frame_2":
#             self.second_frame.grid(row=0, column=1, sticky="nsew")
#         else:
#             self.second_frame.grid_forget()
#         if name == "frame_3":
#             self.third_frame.grid(row=0, column=1, sticky="nsew")
#         else:
#             self.third_frame.grid_forget()

#     def home_button_event(self):
#         self.select_frame_by_name("home")

#     def frame_2_button_event(self):
#         self.select_frame_by_name("frame_2")

#     def frame_3_button_event(self):
#         self.select_frame_by_name("frame_3")

#     def change_appearance_mode_event(self, new_appearance_mode):
#         customtkinter.set_appearance_mode(new_appearance_mode)


# if __name__ == "__main__":
#     app = App()
#     app.mainloop()

cap = cv2.VideoCapture(0)


class App(customtkinter.CTk):
    def __init__(self) -> None:
        super().__init__()

        # configure window
        self.title("CustomTkinter complex_example.py")
        self.geometry(f"{1100}x{580}")

        # configure grid layout (1x2)
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)

        # create sidebar frame with widgets
        self.sidebar_frame = customtkinter.CTkFrame(self, width=140, corner_radius=0)
        self.sidebar_frame.grid(row=0, column=0, rowspan=4, sticky="nsew")
        self.sidebar_frame.grid_rowconfigure(4, weight=1)
        self.logo_label = customtkinter.CTkLabel(
            self.sidebar_frame,
            text="CustomTkinter",
            font=customtkinter.CTkFont(size=20, weight="bold"),
        )
        self.logo_label.grid(row=0, column=0, padx=20, pady=(20, 10))
        self.sidebar_button_1 = customtkinter.CTkButton(
            self.sidebar_frame, command=self.sidebar_button_event
        )
        self.sidebar_button_1.grid(row=1, column=0, padx=20, pady=10)
        self.sidebar_button_2 = customtkinter.CTkButton(
            self.sidebar_frame, command=self.sidebar_button_event
        )
        self.sidebar_button_2.grid(row=2, column=0, padx=20, pady=10)
        self.sidebar_button_3 = customtkinter.CTkButton(
            self.sidebar_frame, command=self.sidebar_button_event
        )
        self.sidebar_button_3.grid(row=3, column=0, padx=20, pady=10)
        self.appearance_mode_label = customtkinter.CTkLabel(
            self.sidebar_frame, text="Appearance Mode:", anchor="w"
        )
        self.appearance_mode_label.grid(row=5, column=0, padx=20, pady=(10, 0))
        self.appearance_mode_optionemenu = customtkinter.CTkOptionMenu(
            self.sidebar_frame,
            values=["Light", "Dark", "System"],
            command=self.change_appearance_mode_event,
        )
        self.appearance_mode_optionemenu.grid(row=6, column=0, padx=20, pady=(10, 10))
        self.scaling_label = customtkinter.CTkLabel(
            self.sidebar_frame, text="UI Scaling:", anchor="w"
        )
        self.scaling_label.grid(row=7, column=0, padx=20, pady=(10, 0))
        self.scaling_optionemenu = customtkinter.CTkOptionMenu(
            self.sidebar_frame,
            values=["80%", "90%", "100%", "110%", "120%"],
            command=self.change_scaling_event,
        )
        self.scaling_optionemenu.grid(row=8, column=0, padx=20, pady=(10, 20))

        self.home_frame = customtkinter.CTkFrame(
            self, corner_radius=0, fg_color="transparent"
        )
        self.home_frame.grid_columnconfigure(0, weight=1)
        self.home_frame_large_image_label = customtkinter.CTkLabel(
            self.home_frame, text=""
        )
        self.home_frame_large_image_label.grid(row=0, column=0, padx=20, pady=10)
        self.home_frame.grid(row=0, column=1, sticky="nsew")

        # self.home_frame_large_image_label = customtkinter.CTkLabel(self.home_frame, text="", image=self.large_test_image)

        # create main entry and button
        # self.entry = customtkinter.CTkEntry(self, placeholder_text="CTkEntry")
        # self.entry.grid(
        #     row=3, column=1, columnspan=2, padx=(20, 0), pady=(20, 20), sticky="nsew"
        # )

        # self.main_button_1 = customtkinter.CTkButton(
        #     master=self,
        #     fg_color="transparent",
        #     border_width=2,
        #     text_color=("gray10", "#DCE4EE"),
        # )
        # self.main_button_1.grid(
        #     row=3, column=3, padx=(20, 20), pady=(20, 20), sticky="nsew"
        # )

        # # create textbox
        # self.textbox = customtkinter.CTkTextbox(self, width=250)
        # self.textbox.grid(row=0, column=1, padx=(20, 0), pady=(20, 0), sticky="nsew")

        # set default values
        self.appearance_mode_optionemenu.set("Dark")
        self.scaling_optionemenu.set("100%")

    def show_frames(self):
        cv2image = cv2.cvtColor(cap.read()[1], cv2.COLOR_BGR2RGB)
        img = Image.fromarray(cv2image)

        self.large_test_image = customtkinter.CTkImage(img, size=img.size)
        # create home frame
        self.home_frame_large_image_label.imgtk = self.large_test_image
        self.home_frame_large_image_label.configure(image=self.large_test_image)

    def open_input_dialog_event(self) -> None:
        dialog = customtkinter.CTkInputDialog(
            text="Type in a number:", title="CTkInputDialog"
        )
        print("CTkInputDialog:", dialog.get_input())

    def change_appearance_mode_event(self, new_appearance_mode: str) -> None:
        customtkinter.set_appearance_mode(new_appearance_mode)

    def change_scaling_event(self, new_scaling: str) -> None:
        new_scaling_float = int(new_scaling.replace("%", "")) / 100
        customtkinter.set_widget_scaling(new_scaling_float)

    def sidebar_button_event(self) -> None:
        print("sidebar_button click")


if __name__ == "__main__":
    from tkinter import *
    import cv2
    from PIL import Image, ImageTk

    # Define a video capture object
    vid = cv2.VideoCapture(0)

    # Declare the width and height in variables
    width, height = 800, 600

    # Set the width and height
    vid.set(cv2.CAP_PROP_FRAME_WIDTH, width)
    vid.set(cv2.CAP_PROP_FRAME_HEIGHT, height)

    # Create a GUI app
    app = Tk()

    # Bind the app with Escape keyboard to
    # quit app whenever pressed
    app.bind('<Escape>', lambda e: app.quit())

    # Create a label and display it on app
    label_widget = Label(app)
    label_widget.pack()

    # Create a function to open camera and
    # display it in the label_widget on app


    def open_camera():

        # Capture the video frame by frame
        _, frame = vid.read()

        # Convert image from one color space to other
        opencv_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA)

        # Capture the latest frame and transform to image
        captured_image = Image.fromarray(opencv_image)

        # Convert captured image to photoimage
        photo_image = ImageTk.PhotoImage(image=captured_image)

        # Displaying photoimage in the label
        label_widget.photo_image = photo_image

        # Configure image in the label
        label_widget.configure(image=photo_image)

        # Repeat the same process after every 10 seconds
        label_widget.after(10, open_camera)


    # Create a button to open the camera in GUI app
    button1 = Button(app, text="Open Camera", command=open_camera)
    button1.pack()

    # Create an infinite loop for displaying app on screen
    app.mainloop()
    app = App()
    app.home_frame_large_image_label.after(20, app.show_frames)
    app.mainloop()

    # translator = SignLanguageTranslator(
    #     show_landmarks=True,
    #     show_bounding_box=True,
    # )
    # translator.start()
    https://www.geeksforgeeks.org/how-to-show-webcam-in-tkinter-window-python/
